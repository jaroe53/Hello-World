

//Interrupt based LED blinker function with a push button to turn ON and OFF the LED blinker functionality.
//Note: the button will only freeze the LED state(s)
class Blinker
{
  int LEDPin;
  long ledONinterval;
  long ledOFFinterval;
  int LEDstate;
  unsigned long previousMillis;
  
  public:
  Blinker(int pin, long on, long off)
  {
    LEDPin = pin;
    pinMode(LEDPin, OUTPUT);

    ledONinterval = on;
    ledOFFinterval = off;

    LEDstate = LOW;
    
    previousMillis = 0;
  }


  void Update()
  {
    unsigned long currentMillis = millis();
   
    if((LEDstate == HIGH) && (currentMillis - previousMillis >= ledONinterval))
    {
      LEDstate = LOW;
      previousMillis = currentMillis;
      digitalWrite(LEDPin, LEDstate);
    }
    else if ((LEDstate == LOW) && (currentMillis - previousMillis >= ledOFFinterval))
    {
      LEDstate = HIGH;
      previousMillis = currentMillis;
      digitalWrite(LEDPin, LEDstate);
    }
  
  }
};

Blinker led1(9, 250, 250);  //Blink the LED: Pin 9, ON Time = 250ms, OFF Time = 250ms
Blinker led2(7, 500, 500);  //Blink the LED: Pin 7, ON Time = 500ms, OFF Time = 500ms

//Define the push button variables
int ButtonState = 0;
int Bpin = 13;

void setup() 
{
  pinMode(Bpin, INPUT_PULLUP);
  Serial.begin(9600);
}

void loop ()
{

   if ((digitalRead(Bpin) == 0) && (ButtonState == 0))
  {
    ButtonState = 1;
  }
  else if ((digitalRead(Bpin) == 0) && (ButtonState == 1))
  {
    ButtonState = 0;
  }
  if (ButtonState == 1)
  {
    led1.Update();
    led2.Update();
  }
  Serial.println(ButtonState);
}
